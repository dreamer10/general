(* fun all_except_option (str, strList) = *)
(*     case strList of *)
(* 	[] => NONE *)
(*       | x::tl => let fun helper (str1, strList1, tuple) =  *)
(* 			 case strList1 of *)
(* 			     [] => tuple *)
(* 			   | str2::tl => if same_string(str1, str2) *)
(* 					then *)
(* 					    case tuple of *)
(* 						 (flag, theList) => (true, theList@tl) *)
(* 					else helpjer(str1, tl, tuple) *)
(* 		 in let val (x, y) = helper(str, strList, (false, [])) *)
(* 		    in if x then SOME y else NONE *)
(* 		    end *)
(* 		 end *)


(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)


fun all_except_option (str, strList) = 
    case strList of 
	[] => NONE
     | str2::xs => if same_string(str, str2)
		   then SOME xs
		   else case all_except_option (str, xs) of
		       NONE => NONE
		    | SOME y  => SOME (str2::y)

fun get_substitutions1 (substitutions, s) =
    case substitutions of
	[] => []
     | x::xs => case all_except_option(s, x) of
		     NONE => []
		   | SOME y => y @ get_substitutions1(xs, s)

fun get_substitutions2 (substitutions, s) =
    case substitutions of
	[] => []
     | x::xs => let fun helper ([], s, acc) = acc
		      | helper (x::xs, s, acc) =
			case all_except_option(s, x) of
			    NONE => []
			 | SOME y => helper(xs, s, acc @ y)
		in helper (substitutions, s, [])
		end

fun similar_names (substitutions, {first = x, middle = y, last = z}) =
    case substitutions of
	[] => []
     | z::zs => let fun helper ([], acc) = acc
		      | helper (t::ts, acc) =
			helper (ts, {first = t, middle = y, last = z} :: acc)
		in helper(get_substitutions2(substitutions, x), [{first = x, middle = y, last = z}])
		end

(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)


fun card_color (suit, rank) =
    case suit of 
	Spades => Black
      | Hearts => Red
      | Clubs => Black
      | Diamonds => Red

fun card_value (suit, rank) =
    case rank of
	Ace => 11
      | Num(x) => x
      | _ => 10

fun remove_card (cs, c, e) =
    case cs of [] => raise e
	    | x::xs => if x = c
		       then xs
		       else x::remove_card(xs, c, e)

fun all_same_color (cs) =
    case cs of [] => true
	    | x::[] => true
	    | x::y::xs => if card_color(x) = card_color(y)
			  then all_same_color(y::xs)
			  else false

fun sum_cards (cs) =
    case cs of 
	[] => 0
     | x::xs => let fun helper (cards, acc) =
		    case cards of
			[] => acc
		     | y::ys => helper(ys, acc + card_value(y))
		in helper(xs, card_value(x))
		end

fun score (cs, goal) =
    let val factor = if all_same_color(cs) then 2 else 1
    in 
	let val mySum = sum_cards(cs)
	in 
	    if mySum >= goal
	    then (mySum - goal) * 3 div factor
	    else (goal - mySum) div factor
	end
    end


fun officiate (cs, ms, goal) =
    let fun helper (cards, heldCards, [], goal, curVal) = score(heldCards, goal)
	  | helper ([], heldCards, m::ms, goal, curVal) = 
	    if curVal > goal
	    then score(heldCards, goal)
	    else
		(case m of
		     Discard (x) => helper([], remove_card(heldCards, x, IllegalMove), ms, goal, curVal - card_value(x))
		   | Draw => score(heldCards, goal))
	  | helper (c::cs, heldCards, m::ms, goal, curVal) =
	    if curVal > goal
	    then score(heldCards, goal)
	    else
		(case m of
		     Discard(x) => helper(c::cs, remove_card(heldCards, x, IllegalMove), ms, goal, curVal - card_value(x))
		   | Draw => helper(cs, c::heldCards, ms, goal, curVal + card_value(c)) )
    in 
	helper(cs, [], ms, goal, 0)
    end
